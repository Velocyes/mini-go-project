// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	model "github.com/Velocyes/mini-go-project/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStoreUsecase is a mock of StoreUsecase interface.
type MockStoreUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockStoreUsecaseMockRecorder
}

// MockStoreUsecaseMockRecorder is the mock recorder for MockStoreUsecase.
type MockStoreUsecaseMockRecorder struct {
	mock *MockStoreUsecase
}

// NewMockStoreUsecase creates a new mock instance.
func NewMockStoreUsecase(ctrl *gomock.Controller) *MockStoreUsecase {
	mock := &MockStoreUsecase{ctrl: ctrl}
	mock.recorder = &MockStoreUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreUsecase) EXPECT() *MockStoreUsecaseMockRecorder {
	return m.recorder
}

// CreateOrders mocks base method.
func (m *MockStoreUsecase) CreateOrders(orders []*model.OrderStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", orders)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockStoreUsecaseMockRecorder) CreateOrders(orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockStoreUsecase)(nil).CreateOrders), orders)
}

// CreateProducts mocks base method.
func (m *MockStoreUsecase) CreateProducts(products []*model.ProductStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducts", products)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProducts indicates an expected call of CreateProducts.
func (mr *MockStoreUsecaseMockRecorder) CreateProducts(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducts", reflect.TypeOf((*MockStoreUsecase)(nil).CreateProducts), products)
}

// DeleteOrdersByIDs mocks base method.
func (m *MockStoreUsecase) DeleteOrdersByIDs(orderIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrdersByIDs", orderIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrdersByIDs indicates an expected call of DeleteOrdersByIDs.
func (mr *MockStoreUsecaseMockRecorder) DeleteOrdersByIDs(orderIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrdersByIDs", reflect.TypeOf((*MockStoreUsecase)(nil).DeleteOrdersByIDs), orderIDs)
}

// DeleteProductsByIDs mocks base method.
func (m *MockStoreUsecase) DeleteProductsByIDs(productIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductsByIDs", productIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductsByIDs indicates an expected call of DeleteProductsByIDs.
func (mr *MockStoreUsecaseMockRecorder) DeleteProductsByIDs(productIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductsByIDs", reflect.TypeOf((*MockStoreUsecase)(nil).DeleteProductsByIDs), productIDs)
}

// SelectAllOrders mocks base method.
func (m *MockStoreUsecase) SelectAllOrders(limit, offset int) ([]*model.OrderStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllOrders", limit, offset)
	ret0, _ := ret[0].([]*model.OrderStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllOrders indicates an expected call of SelectAllOrders.
func (mr *MockStoreUsecaseMockRecorder) SelectAllOrders(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllOrders", reflect.TypeOf((*MockStoreUsecase)(nil).SelectAllOrders), limit, offset)
}

// SelectAllProducts mocks base method.
func (m *MockStoreUsecase) SelectAllProducts(limit, offset int) ([]*model.ProductStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllProducts", limit, offset)
	ret0, _ := ret[0].([]*model.ProductStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllProducts indicates an expected call of SelectAllProducts.
func (mr *MockStoreUsecaseMockRecorder) SelectAllProducts(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllProducts", reflect.TypeOf((*MockStoreUsecase)(nil).SelectAllProducts), limit, offset)
}

// SelectOrdersByIDs mocks base method.
func (m *MockStoreUsecase) SelectOrdersByIDs(orderIDs []int) ([]*model.OrderStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrdersByIDs", orderIDs)
	ret0, _ := ret[0].([]*model.OrderStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOrdersByIDs indicates an expected call of SelectOrdersByIDs.
func (mr *MockStoreUsecaseMockRecorder) SelectOrdersByIDs(orderIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrdersByIDs", reflect.TypeOf((*MockStoreUsecase)(nil).SelectOrdersByIDs), orderIDs)
}

// SelectProductsByIDs mocks base method.
func (m *MockStoreUsecase) SelectProductsByIDs(productIDs []int) ([]*model.ProductStruct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProductsByIDs", productIDs)
	ret0, _ := ret[0].([]*model.ProductStruct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProductsByIDs indicates an expected call of SelectProductsByIDs.
func (mr *MockStoreUsecaseMockRecorder) SelectProductsByIDs(productIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProductsByIDs", reflect.TypeOf((*MockStoreUsecase)(nil).SelectProductsByIDs), productIDs)
}

// UpdateProducts mocks base method.
func (m *MockStoreUsecase) UpdateProducts(products []*model.ProductStruct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProducts", products)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProducts indicates an expected call of UpdateProducts.
func (mr *MockStoreUsecaseMockRecorder) UpdateProducts(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProducts", reflect.TypeOf((*MockStoreUsecase)(nil).UpdateProducts), products)
}
