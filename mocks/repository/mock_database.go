// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/Velocyes/mini-go-project/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CreateOrders mocks base method.
func (m *MockDatabase) CreateOrders(orders []*model.Order) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", orders)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockDatabaseMockRecorder) CreateOrders(orders interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockDatabase)(nil).CreateOrders), orders)
}

// CreateProducts mocks base method.
func (m *MockDatabase) CreateProducts(products []*model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProducts", products)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProducts indicates an expected call of CreateProducts.
func (mr *MockDatabaseMockRecorder) CreateProducts(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProducts", reflect.TypeOf((*MockDatabase)(nil).CreateProducts), products)
}

// DeleteOrdersByIDs mocks base method.
func (m *MockDatabase) DeleteOrdersByIDs(orderIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrdersByIDs", orderIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrdersByIDs indicates an expected call of DeleteOrdersByIDs.
func (mr *MockDatabaseMockRecorder) DeleteOrdersByIDs(orderIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrdersByIDs", reflect.TypeOf((*MockDatabase)(nil).DeleteOrdersByIDs), orderIDs)
}

// DeleteProductsByIDs mocks base method.
func (m *MockDatabase) DeleteProductsByIDs(productIDs []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductsByIDs", productIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductsByIDs indicates an expected call of DeleteProductsByIDs.
func (mr *MockDatabaseMockRecorder) DeleteProductsByIDs(productIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductsByIDs", reflect.TypeOf((*MockDatabase)(nil).DeleteProductsByIDs), productIDs)
}

// SelectAllOrders mocks base method.
func (m *MockDatabase) SelectAllOrders(limit, offset int) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllOrders", limit, offset)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllOrders indicates an expected call of SelectAllOrders.
func (mr *MockDatabaseMockRecorder) SelectAllOrders(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllOrders", reflect.TypeOf((*MockDatabase)(nil).SelectAllOrders), limit, offset)
}

// SelectAllProducts mocks base method.
func (m *MockDatabase) SelectAllProducts(limit, offset int) ([]*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAllProducts", limit, offset)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAllProducts indicates an expected call of SelectAllProducts.
func (mr *MockDatabaseMockRecorder) SelectAllProducts(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAllProducts", reflect.TypeOf((*MockDatabase)(nil).SelectAllProducts), limit, offset)
}

// SelectOrdersByIDs mocks base method.
func (m *MockDatabase) SelectOrdersByIDs(orderIDs []int) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrdersByIDs", orderIDs)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOrdersByIDs indicates an expected call of SelectOrdersByIDs.
func (mr *MockDatabaseMockRecorder) SelectOrdersByIDs(orderIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrdersByIDs", reflect.TypeOf((*MockDatabase)(nil).SelectOrdersByIDs), orderIDs)
}

// SelectProductsByIDs mocks base method.
func (m *MockDatabase) SelectProductsByIDs(productIDs []int) ([]*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProductsByIDs", productIDs)
	ret0, _ := ret[0].([]*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProductsByIDs indicates an expected call of SelectProductsByIDs.
func (mr *MockDatabaseMockRecorder) SelectProductsByIDs(productIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProductsByIDs", reflect.TypeOf((*MockDatabase)(nil).SelectProductsByIDs), productIDs)
}

// UpdateProducts mocks base method.
func (m *MockDatabase) UpdateProducts(products []*model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProducts", products)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProducts indicates an expected call of UpdateProducts.
func (mr *MockDatabaseMockRecorder) UpdateProducts(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProducts", reflect.TypeOf((*MockDatabase)(nil).UpdateProducts), products)
}
